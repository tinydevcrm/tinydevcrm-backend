version: '3.7'

services:
  web:
    build:
      context: ${GIT_REPO_ROOT}/services/app
      dockerfile: development.Dockerfile
    command: python -m ipdb manage.py runserver 0.0.0.0:8000
    volumes:
      - ${GIT_REPO_ROOT}/services/app/src/:/usr/src/app/
      - media_volume:/tinydevcrm-files
    ports:
      - 8000:8000
    env_file:
      # Copy ${GIT_REPO_ROOT}/services/app/conf/.env.dev-example to
      # ${GIT_REPO_ROOT}/services/app/conf/.env.dev
      - ${GIT_REPO_ROOT}/services/app/conf/.env.dev
    depends_on:
      - db
    stdin_open: true
    tty: true
    networks:
      dev_network:
    links:
      - db:db
  broker:
    build:
      context: ${GIT_REPO_ROOT}/services/app
      dockerfile: development.Dockerfile
    command: python manage.py startbroker
    volumes:
      - ${GIT_REPO_ROOT}/services/app/src/:/usr/src/app/
    env_file:
      # Copy ${GIT_REPO_ROOT}/services/app/conf/.env.dev-example to
      # ${GIT_REPO_ROOT}/services/app/conf/.env.dev
      - ${GIT_REPO_ROOT}/services/app/conf/.env.dev
    depends_on:
      - db
    stdin_open: true
    tty: true
    networks:
      dev_network:
    links:
      - db:db
  db:
    build:
      context: ${GIT_REPO_ROOT}/services/db
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - media_volume:/tinydevcrm-files
    env_file:
      # Copy ${GIT_REPO_ROOT}/services/db/conf/.env.dev-example to
      # ${GIT_REPO_ROOT}/services/db/conf/.env.dev
      - ${GIT_REPO_ROOT}/services/db/conf/.env.dev
    networks:
      dev_network:
  pushpin:
    build:
      context: ${GIT_REPO_ROOT}/services/pushpin
      dockerfile: development.Dockerfile
    ports:
      - 7999:7999
      - 5560-5563:5560-5563
    networks:
      dev_network:

volumes:
  # Persisting the data within the PostgreSQL instance to a Docker volume,
  # that binds to '/var/lib/postgresql/data/' directory in the container.
  postgres_data:
  media_volume:

networks:
  dev_network:
